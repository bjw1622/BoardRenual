
@{
    ViewBag.Title = "Detail";
    bool EmailCheck = ViewBag.EmailCheck;
    int No = Model.No;
}

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <script src="https://cdn.jsdelivr.net/npm/handlebars@latest/dist/handlebars.js"></script>
</head>
<body>
    <h2>상세</h2>
    <div class="form-group">
        <label>제목</label>
        <input type="text" class="form-control" name="Title" id="title" value="@Model.Title">
    </div>

    <div class="form-group">
        <label>작성자</label>
        <input type="text" class="form-control" name="Name" readonly value="@Model.Name">
    </div>

    <div class="form-group">
        <label for="exampleFormControlTextarea1">내용</label>
        <textarea class="form-control" name="MainContent" id="mainContent" rows="5">@Model.Content</textarea>
    </div>
    <hr />
    <div class="form-group">
        <h4>첨부 파일</h4>
        @for (int i = 0; i < @ViewBag.FileInfoList.Count; i++)
        {
            <a href="~/Uploads/@ViewBag.FileInfoList[i]" download="@ViewBag.FileInfoList[i]">
                <img style="width:60px;height:60px;" src="~/Uploads/@ViewBag.FileInfoList[i]" alt="이미지 깨짐">
            </a>
        }
    </div>
    <hr />
    <button class="btn btn-primary" id="recommand">추천 : @ViewBag.RecommandCount </button>
    @if (@EmailCheck == true)
    {
        <div>
            <button class="btn btn-info" id="update-btn">수정</button>
            <button class="btn btn-danger" id="delete-btn">삭제</button>
        </div>
    }
    <hr />
    <div class="input-group mb-3" style="display:flex;">
        <input type="text" class="form-control" style="margin-right : 5px;" id="reply">
        <button class="btn btn-outline-secondary" id="reply-btn" type="button">댓글 입력</button>
    </div>
    <hr />
    <h3>댓글 목록</h3>
    <hr />
    <div id="reply-content">
        @for (int i = 0; i < ViewBag.ReplyList.Count; i++)
        {
            <div class="reply-list @ViewBag.ReplyList[i].No">
                <div style="margin-bottom:15px; display:flex; justify-content:space-between">
                    <input type="text" class="form-control" value="@ViewBag.ReplyList[i].Content" readonly>
                    <div>
                        <button class="@ViewBag.ReplyList[i].No add-rereply" onclick=reReplyStrcture(event)>답글 달기</button>
                        <button class="@ViewBag.ReplyList[i].No open-rereply" onclick=reReplyGetList(event)>답글 보기</button>
                        <button class="@ViewBag.ReplyList[i].No close-rereply" onclick="reReplyClose(event)" style="display:none;">답글 닫기</button>
                        <button class="@ViewBag.ReplyList[i].No" id="@ViewBag.ReplyList[i].UserNo" onclick=deleteReply(event)>삭제</button>
                    </div>
                </div>
            </div>
            <div class="re-reply-input-div @ViewBag.ReplyList[i].No" style=" display:none; margin-left:20px; margin-bottom:15px;">
                <input type="text" class="form-control" id="re-reply-input">
                <div>
                    <button class="@ViewBag.ReplyList[i].No" onclick=closeReply(event)>닫기</button>
                    <button class="@ViewBag.ReplyList[i].No"onclick=reReply(event)>답글 입력</button>
                </div>
            </div>
        }
    </div>
</body>
</html>
<script src="~/Scripts/jquery-3.4.1.js"></script>
<script>
    let recommandNumber = parseInt((document.querySelector('#recommand').innerHTML).replace(/[^0-9]/g, ''));
    $('#update-btn').click(() => {
        const flag = confirm("수정 하시겠습니까?");
        if (flag === true) {
            const param = {
                No: @No,
                Title: $('#title').val(),
                Content: $('#mainContent').val(),
            };
        $.ajax({
            url: '/Board/Update/',
            type: 'post',
            data: JSON.stringify(param),
            dataType: 'json',
            contentType: 'application/json',
            success: function (data) {
                if (data === true) {
                    alert('수정 되었습니다.');
                }
                else {
                    alert("수정에 실패했습니다.");
                    window.location.reload();
                }
            },
            error: function () {
            }
        });
    }
    })
    $('#delete-btn').click(() => {
        const flag = confirm("삭제 하시겠습니까?");
        if (flag === true) {
            const param = { No: @No};
        $.ajax({
            url: '/Board/Delete/',
            type: 'post',
            data: JSON.stringify(param),
            dataType: 'json',
            contentType: 'application/json',
            success: function (data) {
                if (data=== true) {
                    alert('삭제되었습니다.');
                    location.href = "/Board/Index";
                }
                else {
                    alert("삭제에 실패했습니다.");
                }
            },
            error: function () {
            }
        });
    }
    })
    // 게시글 추천
    document.querySelector('#recommand').addEventListener('click', () => {
        const param = {
            "BoardNo": @No,
            "Email": "@(Request.Cookies["Email"].Value)",
        }
        $.ajax({
            url: '/Board/Recommand',
            type: 'post',
            dataType: "json",
            data: JSON.stringify(param),
            contentType: "application/json",
            success: function (data) {
                if (data.Flag === 1) {
                    alert('추천이 취소 되었습니다.');
                }
                else if (data.Flag === 0) {
                    alert('추천 되었습니다.');
                }
                else {
                    alert('추천 업데이트에 실패했습니다.')
                }
                document.querySelector('#recommand').innerHTML = `추천 : ${data.RecommandCount}`;
            },
            error: function () {
            }
        });
    })
    // 댓글 작성
    $('#reply-btn').click(() => {
        const param = {
            "BoardNo": @No,
            "ParentReplyNo": 0,
            "Content": $('#reply').val(),
            "Email" : "@(Request.Cookies["Email"].Value)",
        }
        $.ajax({
            url: '/Board/WriteReply',
            type: 'post',
            dataType:'json',
            data: JSON.stringify(param),
            contentType: "application/json",
            success: function (data) {
                if (data.WriteResult === true) {
                    alert('댓글이 작성되었습니다.')
                    $('#reply-content').empty();
                    data.ReplyList.forEach((item) => {
                        $('#reply-content').append(replyStructure(item));
                    })
                }
                else {
                    alert('댓글 작성에 실패했습니다.')
                }
                $('#reply').val("");
            },
            error: function () {
            }
        });
    })
    // 부모 댓글 불러오기
    function replyStructure(item) {
        return `
        <div class="reply-list ${item.No}">
            <div style="margin-bottom:15px; display:flex; justify-content:space-between">
                    <input type="text" class="form-control" value="${item.Content}" readonly>
                    <div>
                        <button class="${item.No} add-rereply" onclick=reReplyStrcture(event)>답글 달기</button>
                        <button class="${item.No} open-rereply" onclick=reReplyGetList(event)>답글 보기</button>
                        <button class="${item.No} close-rereply" onclick=reReplyClose(event) style="display:none;">답글 닫기</button>
                        <button class="${item.No}" id="${item.UserNo}" onclick=deleteReply(event)>삭제</button>
                    </div>
            </div>
        </div>
        <div class="re-reply-input-div ${item.No}" style=" display:none; margin-left:20px; margin-bottom:15px;">
            <input type="text" class="form-control" id="re-reply-input">
              <div>
                <button class="${item.No}" onclick=closeReply(event)>닫기</button>
                <button class="${item.No}"onclick=reReply(event)>답글 입력</button>
            </div>
         </div>
        `
    }
    // 답글 입력창
    function createReReply(No) {
        return `
        <div class="re-reply-input-div ${No}"style="display:flex; justify-content:space-between">
                <input type="text" class="form-control" id="re-reply-input">
            <div>
                <button class="${No}" onclick=closeReply(event)>닫기</button>
                <button class="${No}" onclick=reReply(event)>답글 입력</button>
            </div>
        </div>
        `
    }
    // 답글 달기 onclick
    function reReplyStrcture(event) {
        $(`.re-reply-input-div.${event.target.classList[0]}`).show();
        $(`.${event.target.classList[0]}.add-rereply`).hide();
    }
    function closeReply(event) {
        $(`.re-reply-input-div.${event.target.classList[0]}`).hide();
        $(`.${event.target.classList[0]}.add-rereply`).show();
    }
    // 답글 입력 onclick
    function reReply(event) {
        const param = {
            "BoardNo": @No,
            "ParentReplyNo": event.target.className,
            "Content": $('#re-reply-input').val(),
            "Email" : "@(Request.Cookies["Email"].Value)",
        }
        $.ajax({
            url: '/Board/WriteReply',
            type: 'post',
            dataType:'json',
            data: JSON.stringify(param),
            contentType: "application/json",
            success: function (data) {
                if (data.WriteResult === true) {
                    alert('답글이 작성되었습니다.')
                    $('#reply-content').empty();
                    data.ReplyList.forEach((item) => {
                        $('#reply-content').append(replyStructure(item));
                    })
                }
                else {
                    alert('댓글을 올바르게 입력해주세요.')
                }
                $('#reply').val("");
            },
            error: function () {
            }
        });
    }
    // 부모 댓글에 해당하는 답글 가져오기
    function reReplyGetList(event) {
        const param = {
            ParentReplyNo: event.target.classList[0],
        }
        $.ajax({
            url: '/Board/GetReReplyList',
            type: 'post',
            dataType: 'json',
            data: JSON.stringify(param),
            contentType: "application/json",
            success: function (data) {
                if (data.length === 0) {
                    alert('답글이 없습니다.');
                }
                else {
                    data.forEach((item) => {
                        $(`.reply-list.${event.target.classList[0]}`).append(reReplyStructure(item,param.ParentReplyNo));
                    })
                    $(event.target).hide();
                    $(`.close-rereply.${event.target.classList[0]}`).show();
                }
            },
            error: function () {
            }
        });
    }
    // 자식 댓글 불러오기
    function reReplyStructure(item,ParentReplyNo) {
        return `
        <div class="${ParentReplyNo} re-reply-structure">
            <div style="margin-left:20px; margin-bottom:15px; display:flex; justify-content:space-between">
                    <input type="text" class="form-control" value=${item.Content} readonly>
                    <div>
                        <button class="${item.No}" id="${item.UserNo}" onclick=deleteReply(event)>삭제</button>
                    </div>
            </div>
        </div>
        `
    }
    // 댓글 삭제
    function deleteReply(event) {
        if ("@(Request.Cookies["Email"].Value)" === UserCheck(event)) {
            const deleteReply = confirm('삭제 하시겠습니까?');
            if (deleteReply === true) {
                const param = {
                    "No": parseInt(event.target.classList[0]),
                    "BoardNo": @No,
                }
                $.ajax({
                    url: '/Board/DeleteReply',
                    type: 'post',
                    dataType: 'json',
                    data: JSON.stringify(param),
                    contentType: "application/json",
                    success: function (data) {
                        if (data.Delete === true) {
                            alert('삭제 되었습니다.');
                            $('#reply-content').empty();
                            data.ReplyList.forEach((item) => {
                                $('#reply-content').append(replyStructure(item));
                            })
                        }
                        else {
                            alert('삭제에 실패했습니다.');
                        }
                    },
                    error: function () {
                    }
                });
            }
        }
    }
    function reReplyClose(event) {
        $(`.re-reply-structure.${event.target.classList[0]}`).hide();
        $(`.${event.target.classList[0]}.close-rereply`).hide();
        $(`.${event.target.classList[0]}.open-rereply`).show();
    }
    // 댓글 본인 확인
    function UserCheck(event) {
        const param = {
            "No": parseInt(event.target.id),
        }
        let Email;
        $.ajax({
            url: '/Board/UserCheck',
            type: 'post',
            dataType: 'json',
            data: JSON.stringify(param),
            contentType: "application/json",
            async: false,
            success: function (data) {
                if (data.Email === "") {
                    alert('사용자 확인이 필요합니다.');
                }
                else if ("@(Request.Cookies["Email"].Value)" !== data.Email) {
                    alert('삭제 권한이 없습니다.');
                }
                else {
                    Email = data.Email;
                }
            },
            error: function () {
            }
        });
        return Email;
    }
</script>